openapi: 3.0.3
info:
  title: Event Scheduler API
  version: "1.0.0"
  description: >
    This API manages schedules and their corresponding events.
    It includes endpoints for creating, reading, updating, and deleting schedules,
    as well as listing pending or archived events.

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /api/schedules:
    post:
      summary: Create a new Schedule
      operationId: createSchedule
      tags:
        - Schedules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleCreateRequest'
      responses:
        '201':
          description: Schedule created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The MongoDB ObjectID of the newly created schedule.
        '400':
          description: Invalid request body or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
    parameters: []

  /api/schedules/{scheduleId}:
    get:
      summary: Get a single schedule by ID
      operationId: getSchedule
      tags:
        - Schedules
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
      responses:
        '200':
          description: Schedule details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          description: Invalid schedule ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
    put:
      summary: Update an existing Schedule
      operationId: updateSchedule
      tags:
        - Schedules
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Partial schedule fields to update (excluding read-only fields).
              type: object
              properties:
                name:
                  type: string
                  description: The new schedule name.
                rrule:
                  type: string
                  description: The new RRULE definition.
                callback_url:
                  type: string
                  format: uri
                  description: The new callback URL to call.
                method:
                  type: string
                  description: HTTP method to use for callbacks.
                headers:
                  type: object
                  additionalProperties:
                    type: string
                body:
                  type: string
                  description: Body content for callback requests.
      responses:
        '200':
          description: Schedule updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid schedule ID or invalid JSON body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Schedule not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'

    delete:
      summary: Delete a Schedule and its associated Events
      operationId: deleteSchedule
      tags:
        - Schedules
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
      responses:
        '200':
          description: Schedule (and associated events) deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid schedule ID format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Schedule not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'

  /api/schedules/{scheduleId}/events/pending:
    get:
      summary: Get the pending (upcoming) events for a Schedule
      operationId: getPendingEvents
      tags:
        - Events
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/PageQueryParam'
      responses:
        '200':
          description: List of pending (non-archived) events.
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  page:
                    type: integer
                    description: Current page of results.
                  limit:
                    type: integer
                    description: Number of items per page.
        '400':
          description: Missing or invalid schedule ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Failed to fetch events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'

  /api/schedules/{scheduleId}/events/history:
    get:
      summary: Get the archived (historical) events for a Schedule
      operationId: getArchivedEvents
      tags:
        - Events
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/PageQueryParam'
      responses:
        '200':
          description: List of archived (historical) events.
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  page:
                    type: integer
                  limit:
                    type: integer
        '400':
          description: Missing or invalid schedule ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Failed to fetch events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'

components:
  parameters:
    ScheduleIdParam:
      name: scheduleId
      in: path
      required: true
      schema:
        type: string
        format: objectid
        example: 64b76c5986b6c9f24f1c0952
      description: MongoDB ObjectID of the schedule

    LimitQueryParam:
      name: limit
      in: query
      required: false
      description: Number of items per page.
      schema:
        type: integer
        default: 10

    PageQueryParam:
      name: page
      in: query
      required: false
      description: Page number to retrieve.
      schema:
        type: integer
        default: 1

  schemas:
    HTTPError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              enum: [invalid_request, not_found, database_error, validation_failed, internal_error]
              example: validation_failed
            message:
              type: string
              example: Invalid RRULE format
          required:
            - code
            - message

    ScheduleCreateRequest:
      type: object
      required:
        - name
        - rrule
        - callback_url
      properties:
        name:
          type: string
          description: Name of the schedule.
          example: "Daily Report Generation"
        rrule:
          type: string
          description: RRULE describing the repeating schedule.
          example: "FREQ=DAILY;INTERVAL=1"
        callback_url:
          type: string
          format: uri
          description: Where the worker will make an HTTP request.
          example: "https://example.org/my-callback"
        method:
          type: string
          description: HTTP method to use for callbacks (GET, POST, etc.).
          example: "POST"
        headers:
          type: object
          additionalProperties:
            type: string
          description: Optional headers for the callback request.
          example:
            Content-Type: application/json
        body:
          type: string
          description: Optional body content for the callback.
          example: '{"payload":"some data"}'

    Schedule:
      type: object
      properties:
        id:
          type: string
          format: objectid
          example: 64b76c5986b6c9f24f1c0952
        name:
          type: string
          example: Daily Backup
        rrule:
          type: string
          example: FREQ=DAILY
        callback_url:
          type: string
          format: uri
          example: https://api.example.com/backup
        method:
          type: string
          example: POST
        headers:
          type: object
          additionalProperties:
            type: string
          example:
            Authorization: Bearer token
        body:
          type: string
          example: '{"action":"backup"}'
        created_at:
          type: string
          format: date-time
          example: 2024-02-20T09:00:00Z

    Event:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectID of the event.
          example: "64c10d4286b6c9f24f1c0952"
        schedule_id:
          type: string
          description: The schedule's MongoDB ObjectID to which this event belongs.
          example: "64b76c5986b6c9f24f1c0952"
        run_time:
          type: string
          format: date-time
          description: The date/time at which the event is/was due to run.
        status:
          type: array
          items:
            type: object
            properties:
              time:
                type: string
                format: date-time
              status:
                type: string
                example: "ready_queue"
              message:
                type: string
                example: "Event pre-queued for ready queue"
          description: A list of status changes with timestamps and messages.
        created_at:
          type: string
          format: date-time
          description: Timestamp the event was created.

tags:
  - name: Schedules
    description: Endpoints related to creating and managing schedules
  - name: Events
    description: Endpoints related to viewing events (pending or history)